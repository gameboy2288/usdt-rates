// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "usdt-rates/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type RepositoryInterface struct {
	mock.Mock
}

// SaveAsk provides a mock function with given fields: rateID, ask
func (_m *RepositoryInterface) SaveAsk(rateID int64, ask domain.Ask) error {
	ret := _m.Called(rateID, ask)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, domain.Ask) error); ok {
		r0 = rf(rateID, ask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveBid provides a mock function with given fields: rateID, bid
func (_m *RepositoryInterface) SaveBid(rateID int64, bid domain.Ask) error {
	ret := _m.Called(rateID, bid)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, domain.Ask) error); ok {
		r0 = rf(rateID, bid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRate provides a mock function with given fields: timestamp
func (_m *RepositoryInterface) SaveRate(timestamp int64) (int64, error) {
	ret := _m.Called(timestamp)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(timestamp)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryInterface creates a new instance of RepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryInterface(t mockConstructorTestingTNewRepositoryInterface) *RepositoryInterface {
	mock := &RepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
